"""
Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""


def solution() -> None:
    greatest_divisors = 0
    triangle_number = 0
    i = 1
    while greatest_divisors < 500:
        triangle_number += i
        divisors = get_divisors(triangle_number)
        if divisors > greatest_divisors:
            greatest_divisors = divisors
            print(f"{triangle_number} has {greatest_divisors} divisors")
        i += 1


def get_divisors(number: int) -> int:
    """
    Returns the number of divisors for a given number.

    it is done so by dividing the number by all the numbers from 1 to the square root of the number.
    """
    # although this is not the most efficient way to do it, it is reasonable for this problem
    divisors = 0
    for i in range(1, int(number**0.5) + 1):
        if number % i == 0:
            divisors += 2
    return divisors


if __name__ == "__main__":
    solution()
